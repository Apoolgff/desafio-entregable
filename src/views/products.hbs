{{#if user}}
<nav class="navbar">
    <p class="logo">E-Commerce</p>
    <div class="nav-links">
    <button id="chat-btn">Ir a Chat</button>
    <button id="role-btn">Cambiar Rol</button>
    <button id="manager-btn">Manager (premium)</button>

    <button id="logout-btn">Logout</button>
    </div>
</nav>
<div class="container">
  <div class="product-container">
    <h1>Bienvenido {{user.first_name}} {{user.last_name}}!</h1>
    <p><span>Email:</span> <span class="user-email">{{user.email}}</span></p>

    <p><span>Rol:</span> {{user.role}}</p>
    <p><span>ID Carrito:</span> {{user.cart._id}}</p>


    <h2>Lista de Productos</h2>
    <ul class="products">
      {{#each products}}
      <li class="product-card">
        <strong>ID:</strong> {{_id}}<br>
        <strong>Title:</strong> {{title}}<br>
        <strong>Description:</strong> {{description}}<br>
        <strong>Code:</strong> {{code}}<br>
        <strong>Price:</strong> ${{price}}<br>
        <strong>Status:</strong> {{status}}<br>
        <strong>Stock:</strong> {{stock}}<br>
        <strong>Category:</strong> {{category}}<br>
        <strong>Owner:</strong> {{owner}}<br>
        <strong>Thumbnails:</strong>
        <ul class="thumbnails">
          {{#each thumbnails}}
          <li><img class="image" src="{{this}}" alt="Thumbnail"></li>
          {{/each}}
        </ul>

        <label for="quantity-input-{{_id}}">Cantidad:</label>
        <input type="number" id="quantity-input-{{_id}}" class="quantity-input" value="1" min="1">

        <button class="add-to-cart-btn" data-product-id="{{_id}}" data-product-stock="{{stock}}"
          data-cart-id="{{user.cart.cartId._id}}">Agregar al carrito</button>

      </li>
      {{/each}}
    </ul>
  </div>
  <div class="cart" data-cart-id="{{user.cart._id}}">
    <h2>Carrito</h2>
    <p><strong>ID del carrito: </strong>{{user.cart._id}}</p>
    <p id="total"><strong>Total a Pagar: </strong></p>
    <ul>
      {{#each user.cart.products}}

      {{/each}}
    </ul>

    <button class="clear-cart-btn">Vaciar Carrito</button>
    <button class="purchase-btn">Realizar Compra</button>
  </div>
  {{else}}
  <p>Usuario no autenticado. Por favor, inicie sesión.</p>
  {{/if}}
</div>
<!-- Paginación -->
<div class="pagination">
  {{#if pagination.hasPrevPage}}
  <a href="{{pagination.prevLink}}">Anterior</a>
  {{/if}}

  <span>Página {{pagination.page}} de {{pagination.totalPages}}</span>

  {{#if pagination.hasNextPage}}
  <a href="{{pagination.nextLink}}">Siguiente</a>
  {{/if}}
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Asignación de variables
    const chatButton = document.getElementById('chat-btn');
    const roleButton = document.getElementById('role-btn');
    const managerButton = document.getElementById('manager-btn');
    const logoutButton = document.getElementById('logout-btn');
    const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');
    const clearCartButton = document.querySelector('.clear-cart-btn');
    const purchaseButton = document.querySelector('.purchase-btn');
    const cartElement = document.querySelector('.cart');
    const totalAmountDisplay = document.getElementById('total');

    // Event listeners
    if (chatButton) {
      chatButton.addEventListener('click', () => goToPage('/chat'));
    }
    if (roleButton) {
      roleButton.addEventListener('click', () => goToPage('/role'));
    }
    if (managerButton) {
      managerButton.addEventListener('click', () => goToPage('/manager'));
    }
    if (logoutButton) {
      logoutButton.addEventListener('click', logout);
    }
    addToCartButtons.forEach(button => {
      button.addEventListener('click', addToCart);
    });
    if (clearCartButton) {
      clearCartButton.addEventListener('click', clearCart);
    }
    if (purchaseButton) {
      purchaseButton.addEventListener('click', purchaseCart);
    }

    // Funciones de utilidad
    function goToPage(url) {
      window.location.href = url;
    }

    function logout() {
      fetch('/api/user/logout', {
        method: 'GET',
        credentials: 'include',
      })
        .then(response => {
          if (response.ok) {
            goToPage('/login');
          } else {
            console.error('Error en el logout:', response.statusText);
          }
        })
        .catch(error => console.error('Error en el logout:', error));
    }

    async function addToCart(event) {
      const button = event.target;
      const productId = button.getAttribute('data-product-id');
      const cartId = cartElement.dataset.cartId;
      const quantityInput = document.getElementById(`quantity-input-${productId}`);
      const quantity = parseInt(quantityInput.value) || 1;
      const productStock = parseInt(button.getAttribute('data-product-stock'));

      // Verifica si la cantidad ingresada es mayor que el stock disponible
      // if (quantity > productStock) {
      //   alert('No hay suficiente stock disponible para agregar esta cantidad al carrito.');
      //   return;
      // }

      try {
        const addToCartResponse = await fetch(`/api/carts/${cartId}/product/${productId}`, {
          method: 'POST',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ quantity }),
        });
        if (!addToCartResponse.ok) {
          throw new Error(`Error al agregar al carrito: ${addToCartResponse.statusText}`);
        }
        const addToCartData = await addToCartResponse.json();
        await new Promise(resolve => setTimeout(resolve, 500));

        const updatedCartResponse = await fetch(`/api/carts/${cartId}`);
        const updatedCartData = await updatedCartResponse.json();

        renderCart(updatedCartData.cart);
      } catch (error) {
        console.error('Error al agregar al carrito:', error);
      }
    }

    function clearCart() {
      const cartId = cartElement.dataset.cartId;
      fetch(`/api/carts/${cartId}`, {
        method: 'DELETE',
        credentials: 'include',
      })
        .then(response => response.json())
        .then(data => {
          renderCart(data.cart);
        })
        .catch(error => console.error('Error al vaciar el carrito:', error));
    }

    async function purchaseCart() {
      const cartId = cartElement.dataset.cartId;
      try {
        const response = await fetch(`/api/carts/${cartId}/purchase`, {
          method: 'POST',
          credentials: 'include',
        });
        if (response.ok) {
          const responseData = await response.json();
          alert(`Compra realizada con éxito`);
          setTimeout(() => {
            location.reload();
          }, 500);
        } else {
          const errorData = await response.json();
          alert('Algunos productos no pudieron ser comprados');
          console.error('Error al realizar la compra:', errorData);
        }
      } catch (error) {
        console.error('Error al realizar la compra:', error);
        alert('Error al realizar la compra. Por favor, intenta de nuevo.');
      }
    }

    // Elimina un producto del carrito
    function removeFromCart(productId) {
      const cartId = cartElement.dataset.cartId;

      fetch(`/api/carts/${cartId}/products/${productId}`, {
        method: 'DELETE',
        credentials: 'include',
      })
        .then(response => response.json())
        .then(data => {
          fetch(`/api/carts/${cartId}`)
            .then(response => response.json())
            .then(data => {
              renderCart(data.cart);
            })
            .catch(error => console.error('Error al obtener el carrito actualizado:', error));
        })
        .catch(error => console.error('Error al eliminar del carrito:', error));
    }

    // Renderizado del carrito
    function renderCart(cart) {
      let totalPrice = 0;
      const cartList = document.querySelector('.cart ul');
      cartList.innerHTML = '';

      if (cart && cart.products) {
        cart.products.forEach(product => {
          const listItem = document.createElement('li');
          listItem.innerHTML = `
          <p><strong>ID: </strong>${product.productId._id}</p>
          <p><strong>Producto: </strong>${product.productId.title}</p>
          <div><strong>Thumbnails:</strong>
            <ul class="thumbnails">${product.productId.thumbnails.map(thumbnail => `<li><img class="image" src="${thumbnail}" alt="Thumbnail"></li>`).join('')}</ul>
          </div>
          <p><strong>Descripción: </strong>${product.productId.description}</p>
          <p><strong>Código: </strong>${product.productId.code}</p>
          <p><strong>Categoría: </strong>${product.productId.category}</p>
          <p><strong>Precio unitario: </strong>$
          <strong>${product.productId.price}</strong>
        </p>
        <p><strong>Cantidad: </strong>${product.quantity}</p>
        <button class="remove-from-cart-btn" data-product-id="${product.productId._id}">Eliminar del carrito</button>
      `;
          const removeButton = listItem.querySelector('.remove-from-cart-btn');
          removeButton.addEventListener('click', () => removeFromCart(product.productId._id));

          const productPrice = parseFloat(product.productId.price);
          const productTotalPrice = productPrice * product.quantity;
          totalPrice += productTotalPrice;

          cartList.appendChild(listItem);
        });
      }

      totalAmountDisplay.textContent = `Total a Pagar: $${totalPrice.toFixed(2)}`;
    }

    // Cargar el carrito al cargar la página
    const cartId = cartElement.dataset.cartId;
    fetch(`/api/carts/${cartId}`)
      .then(response => {
        if (!response.ok) {
          throw new Error(`Error en la solicitud: ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        renderCart(data.cart);
      })
      .catch(error => {
        console.error('Error en la solicitud de obtener el carrito:', error);
      });
  });

</script>